require("wozniak.remap")
require("wozniak.settings")
-- ==========================
--  Lazy.nvim bootstrap
-- ==========================
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git", "clone", "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

-- ==========================
--  Plugins
-- ==========================
require("lazy").setup({
  -- ===== Tree-sitter: modern syntax highlighting =====
  {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",
    config = function()
      local ts_install = require("nvim-treesitter.install")
      ts_install.prefer_git = true
      ts_install.compilers = { "gcc", "clang" }

      require("nvim-treesitter.configs").setup({
        ensure_installed = { "c", "cpp", "lua", "python", "verilog", "vhdl" },
        auto_install = true,
        highlight = { enable = true },
        indent = { enable = true },
        rainbow = { enable = true, extended_mode = true },
      })
    end,
  },

  -- ===== Catppuccin colorscheme =====
  {
    "catppuccin/nvim",
    name = "catppuccin",
    priority = 1000,
    config = function()
      require("catppuccin").setup({
        flavour = "mocha", -- latte, frappe, macchiato, mocha
        transparent_background = false,
        term_colors = true,
        integrations = {
          treesitter = true,
          ts_rainbow = true,
          context = true,
          native_lsp = {
            enabled = true,
            virtual_text = { errors = { "italic" }, hints = { "italic" }, warnings = { "italic" }, information = { "italic" } },
            underlines = { errors = { "underline" }, hints = { "underline" }, warnings = { "underline" }, information = { "underline" } },
          },
        },
        custom_highlights = function(colors)
          return {
          -- Keywords and control flow
          ["@keyword"] = { fg = colors.mauve, style = { "bold" } },
          ["@keyword.function"] = { fg = colors.mauve, style = { "bold" } },
          ["@conditional"] = { fg = colors.mauve, style = { "bold" } },
          ["@repeat"] = { fg = colors.mauve, style = { "bold" } },
          ["@operator"] = { fg = colors.red },

          -- Module / function / task definitions
          ["@function"] = { fg = colors.blue, style = { "bold" } },
          ["@function.call"] = { fg = colors.blue },
          ["@type"] = { fg = colors.yellow, style = { "bold" } },
          ["@type.definition"] = { fg = colors.yellow, style = { "bold" } },

          -- Ports, signals, variables
          ["@variable"] = { fg = colors.sky },
          ["@variable.builtin"] = { fg = colors.teal, style = { "italic" } },
          ["@field"] = { fg = colors.sky },
          ["@property"] = { fg = colors.sky },

          -- Parameters, constants, defines
          ["@constant"] = { fg = colors.peach, style = { "bold" } },
          ["@constant.builtin"] = { fg = colors.peach, style = { "italic" } },
          ["@constant.macro"] = { fg = colors.peach, style = { "bold" } },
          ["@define"] = { fg = colors.peach, style = { "bold" } },

          -- Numbers and literals
          ["@number"] = { fg = colors.green },
          ["@float"] = { fg = colors.green },
          ["@string"] = { fg = colors.green },

          -- Comments and directives
          ["@comment"] = { fg = colors.overlay1, style = { "italic" } },
          ["@preproc"] = { fg = colors.peach, style = { "bold" } },
          ["@include"] = { fg = colors.peach, style = { "bold" } },

          -- Braces, delimiters
          ["@punctuation.delimiter"] = { fg = colors.text },
          ["@punctuation.bracket"] = { fg = colors.text },
          ["@punctuation.special"] = { fg = colors.text },

          -- Misc
          ["@label"] = { fg = colors.flamingo },
          ["@namespace"] = { fg = colors.yellow },
          ["@attribute"] = { fg = colors.teal },
          }
        end,
      })
      vim.cmd.colorscheme("catppuccin")
    end,
  },
})

-- ==========================
--  Custom filetypes
-- ==========================
vim.api.nvim_create_autocmd({ "BufRead", "BufNewFile" }, {
  pattern = "*.sv",
  command = "set filetype=verilog",
})
vim.api.nvim_create_autocmd({ "BufRead", "BufNewFile" }, {
  pattern = "*.v",
  command = "set filetype=verilog",
})
vim.api.nvim_create_autocmd({ "BufRead", "BufNewFile" }, {
  pattern = { "*.vhd", "*.vhdl" },
  command = "set filetype=vhdl",
})
